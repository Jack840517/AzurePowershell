// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.PowerShell.Cmdlets.Peering.Models
{
    using System;

    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Dynamic;
    using System.Linq;

    /// <summary>
    /// InputObject is a logical representation of a set of connections to the
    /// Microsoft Cloud Edge at a location.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PSDirectPeeringModelView : PSPeering
    {
        /// <summary>
        /// Initializes a new instance of the PSDirectPeeringModelView class.
        /// </summary>
        public PSDirectPeeringModelView() 
        {
            CustomInit();
        }

        public PSDirectPeeringModelView(PSPeering peering)
        {
            this.Connections = peering.Direct?.Connections;
            this.Kind = peering.Kind;
            this.Location = peering.Location;
            this.PeerAsn = peering.Direct.PeerAsn;
            this.PeeringLocation = peering.PeeringLocation;
            this.ProvisioningState = peering.ProvisioningState;
            this.Sku = peering.Sku;
            this.UseForPeeringService = peering.Direct.UseForPeeringService ?? false;
            this.Tags = peering.Tags;
            this.Name = peering.Name;
            this.Id = peering.Id;
            this.Type = peering.Type;
            this.Exchange = null;
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the name of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public new virtual string Name { get; private set; }

        /// <summary>
        /// Gets or sets the SKU that defines the tier and kind of the peering.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public new virtual PSPeeringSku Sku { get; set; }

        /// <summary>
        /// Gets or sets the kind of the peering. Possible values include:
        /// 'Direct', 'Exchange'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public new virtual string Kind { get; set; }

        /// <summary>
        /// Gets or sets the set of connections that constitute a direct
        /// peering.
        /// </summary>
        [JsonProperty(PropertyName = "connections")]
        public  IList<PSDirectConnection> Connections { get; set; }

        /// <summary>
        /// Gets or sets the flag that indicates whether or not the peering is
        /// used for peering service.
        /// </summary>
        [JsonProperty(PropertyName = "useForPeeringService")]
        public  bool UseForPeeringService { get; set; }

        /// <summary>
        /// Gets or sets the reference of the peer ASN.
        /// </summary>
        [JsonProperty(PropertyName = "peerAsn")]
        public  PSSubResource PeerAsn { get; set; }

        /// <summary>
        /// Gets or sets the location of the peering.
        /// </summary>
        [JsonProperty(PropertyName = "properties.peeringLocation")]
        public new virtual string PeeringLocation { get; set; }

        /// <summary>
        /// Gets the provisioning state of the resource. Possible values
        /// include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public new virtual string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the location of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public new virtual string Location { get; set; }

        /// <summary>
        /// Gets the ID of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public new virtual string Id { get; private set; }

        /// <summary>
        /// Gets the type of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public new virtual string Type { get; private set; }

        /// <summary>
        /// Gets or sets the resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public new virtual IDictionary<string, string> Tags { get; set; }
    }
}
